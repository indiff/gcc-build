name: GCC+LLD Build

on:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      buildGlibc:
        description: 'GCC build with internal glibc'
        type: string
        default: ""
        required: false
      buildPrefix:
        description: 'GCC build prefix'
        type: string
        default: "/opt/gcc"
        required: false
      gcc_ver:
          description: 'Select GCC Version'
          type: choice
          default: "nightly"
          required: false
          options: 
          - 10.5.0
          - nightly  
env:
  # GITHUB_EMAIL: ${{ secrets.EMAIL }}
  # GITHUB_TOKEN: ${{ secrets.API_TOKEN_GITHUB }}
  # GITHUB_USER: ${{ secrets.USERNAME }}
  BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  CHAT_ID: ${{ secrets.CHAT_ID }}
  GIT_VERSION: "2.49.0"
  gcc_indiff_ubuntu_url: "https://github.com/indiff/gcc-build/releases/download/20250416_1126/gcc-indiff-ubuntu-x86_64-20250416_1125.xz"
  gcc_indiff_centos7_url: "https://github.com/indiff/gcc-build/releases/download/20251009_0934_16.0.0/gcc-indiff-centos7-16.0.0-x86_64-20251009_0931.xz"
jobs:
  before_build:
    runs-on: [ ubuntu-latest ]
    outputs:
      GCC_BUILD_VERSION: ${{ steps.get.outputs.GCC_BUILD_VERSION }}
      GCC_BUILD_PREFIX: ${{ steps.get.outputs.GCC_BUILD_PREFIX }}
      GCC_BUILD_GLIBC: ${{ steps.get.outputs.GCC_BUILD_GLIBC }}
    # https://docs.github.com/zh/actions/writing-workflows/choosing-what-your-workflow-does/passing-information-between-jobs#%E7%A4%BA%E4%BE%8B%E5%AE%9A%E4%B9%89%E4%BD%9C%E4%B8%9A%E7%9A%84%E8%BE%93%E5%87%BA  
    steps:
      - name: Get buildPrefix
        id: get
        run: |
          set -eux
          # 首先更新索引（带重试/修复）
          sudo apt-get clean
          sudo apt-get update -o Acquire::Retries=5 || sudo apt-get update --fix-missing
          # 如仍失败，切到官方镜像再更新
          if ! sudo apt-get update; then
            sudo sed -i 's|azure.archive.ubuntu.com|archive.ubuntu.com|g' /etc/apt/sources.list
            sudo sed -i 's|http://security.ubuntu.com|https://security.ubuntu.com|g' /etc/apt/sources.list
            sudo apt-get update -o Acquire::Retries=5
          fi

          # 安装所需包(systemd 已有，可不装）
          sudo apt-get install -y --no-install-recommends language-pack-zh-hans language-pack-zh-hans-base locales tree

          
          sudo locale-gen zh_CN.UTF-8 || true
          /usr/bin/localectl set-locale LANG=zh_CN.UTF-8 || true 
          /usr/bin/timedatectl set-timezone Asia/Shanghai || true 
          /usr/bin/timedatectl set-ntp true || true

          curl --max-time 10 -sLo ver "https://github.com/gcc-mirror/gcc/raw/refs/heads/master/gcc/BASE-VER"
          # curl --max-time 10 -sLo ver "https://gcc.gnu.org/git/?p=gcc.git;a=blob_plain;f=gcc/BASE-VER"
          export version=$(cat ver)
          echo "GCC_BUILD_VERSION=${version}" >> "$GITHUB_OUTPUT"
          export build_prefix="${{ github.event.inputs.buildPrefix }}"
          if [ "${{ github.event.inputs.buildPrefix }}" == "" ]; then build_prefix="/opt/gcc"; fi
          echo "GCC_BUILD_PREFIX=${build_prefix}" >> "$GITHUB_OUTPUT"
          if [ "${{ github.event.inputs.buildGlibc }}" == "true" ]; then echo "GCC_BUILD_GLIBC=true" >> "$GITHUB_OUTPUT"; fi
          day=$(date +%d)
          if [[ $((10#$day % 2)) -eq 0 ]]; then
            echo "今天是双数日"
            echo "GCC_BUILD_GLIBC=true" >> "$GITHUB_OUTPUT";
          else
            echo "今天是单数日"
          fi

  build-arm64-tc:
    # skip
    if: false  
    runs-on: ubuntu-24.04-arm

    steps:
    - uses: actions/checkout@v5
    - name: Set build date
      id: get-date
      run: |
        sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
        echo ::set-output name=date::$(/bin/date -u "+%Y%m%d")
    - name: Setup
      run: |
        sudo apt-get update
        sudo apt-get install -y systemd language-pack-zh-hans language-pack-zh-hans-base locales tree
        sudo locale-gen zh_CN.UTF-8; /usr/bin/localectl set-locale LANG=zh_CN.UTF-8 || true ; 
        /usr/bin/timedatectl set-timezone Asia/Shanghai || true; 
        /usr/bin/timedatectl set-ntp true || true;
        sudo apt-get install -y flex bison ncurses-dev texinfo gcc gperf patch libtool automake g++ libncurses5-dev gawk subversion expat libexpat1-dev binutils-dev bc libcap-dev autoconf libgmp-dev build-essential pkg-config libmpc-dev libmpfr-dev autopoint gettext txt2man liblzma-dev libssl-dev libz-dev mercurial wget tar cmake zstd ninja-build lz4 liblz4-tool liblz4-dev lzma libc6-dev-i386 --fix-broken --fix-missing
    - name: Build
      run: |
        chmod a+x build-*.sh
        curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" -d chat_id="${CHAT_ID}" -d "disable_web_page_preview=true" -d "parse_mode=html" -d text="<b>Starting ARM64 GCC Build</b>"
        ./build-gcc.sh -a arm64
        ./build-lld.sh -a arm64
        script_dir=$(pwd)
        cd gcc-arm64
        ./bin/aarch64-elf-gcc -v 2>&1 | tee ../gcc-version
        ./bin/aarch64-elf-ld.lld -v 2>&1 | tee ../lld-arm64-version
        bash "$script_dir/strip-binaries.sh"
        cd ../ && cat lld-arm64-version >> gcc-version
    - name: Create tarball
      run: |
        tree .
        # tar -cvf eva-gcc-arm64-$(/bin/date -u '+%d%m%Y').xz gcc-arm64/*
        cd gcc-arm64
        zip -r -q -9 ../eva-gcc-arm64-$(/bin/date -u '+%d%m%Y').zip .

    - uses: actions/upload-artifact@main
      with:
       name: aarch64-tarball
       path: |
         *.xz
         *.zip
         gcc-version

  build-x86-tc:
    # skip
    if: false
    runs-on: ubuntu-latest
    needs: before_build

    steps:
    - uses: actions/checkout@v5
    - name: Set build date
      id: get-date
      run: |
        sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
        echo ::set-output name=date::$(/bin/date -u "+%Y%m%d")
    - name: Setup
      run: |
        sudo apt-get update
        sudo apt-get install -y systemd language-pack-zh-hans language-pack-zh-hans-base locales tree
        sudo locale-gen zh_CN.UTF-8; /usr/bin/localectl set-locale LANG=zh_CN.UTF-8 || true ; 
        /usr/bin/timedatectl set-timezone Asia/Shanghai || true; 
        /usr/bin/timedatectl set-ntp true || true;
        sudo apt-get install -y flex bison ncurses-dev texinfo gcc gperf patch libtool automake g++ libncurses5-dev gawk subversion expat libexpat1-dev binutils-dev bc libcap-dev autoconf libgmp-dev build-essential pkg-config libmpc-dev libmpfr-dev autopoint gettext txt2man liblzma-dev libssl-dev libz-dev mercurial wget tar cmake zstd ninja-build lz4 liblz4-tool liblz4-dev lzma libc6-dev-i386 --fix-broken --fix-missing
        # update latest gcc
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt update
        sudo apt upgrade
        # 示例安装GCC 14
        sudo apt install gcc-14
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-14 14
        gcc --version

        # update my gcc
        curl -sLo /opt/gcc-indiff.zip ${{ env.gcc_indiff_ubuntu_url }}
        unzip /opt/gcc-indiff.zip -d /opt/gcc-indiff
        sudo update-alternatives --install /usr/bin/gcc gcc /opt/gcc-indiff/bin/gcc 100
        sudo update-alternatives --install /usr/bin/g++ g++ /opt/gcc-indiff/bin/g++ 100           
        gcc --version
        g++ --version

    - name: Build
      run: |
        chmod a+x build-*.sh
        curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" -d chat_id="${CHAT_ID}" -d "disable_web_page_preview=true" -d "parse_mode=html" -d text="<b>Starting Ubuntu GCC Build</b>"
        ./build-gcc.sh -a x86
        cd gcc-x86
        zip -r -q -9 ../gcc-indiff-ubuntu-${{ needs.before_build.outputs.GCC_BUILD_VERSION }}-x86_64-$(date +'%Y%m%d_%H%M').xz .
        # cd ..
        # ./build-lld.sh -a x86
        # script_dir=$(pwd)
        # bash "$script_dir/strip-binaries.sh"

    - name: Create tarball
      run: |
        tree gcc-x86
        # cd gcc-x86
        # zip -r -q -9 ../gcc-indiff-ubuntu-x86_64-all-$(date +'%Y%m%d_%H%M').xz .
        

    - uses: actions/upload-artifact@main
      with:
       name: gcc-unbuntu-${{ needs.before_build.outputs.GCC_BUILD_VERSION }}
       path: |
         *.xz

  build-in-centos7:
    runs-on: ubuntu-latest
    needs: before_build
    timeout-minutes: 360 # 设置超时时间为6小时

    steps:
      - name: Free Disk-Space
        run: df -h && sudo apt-get clean && docker system prune -a -f && sudo rm -rf /usr/local/lib/android /usr/share/dotnet /opt/ghc && df -h && free -h

      - name: Checkout v5
        uses: actions/checkout@v5    

      - name: Create build script
        run: |
          set -xe
          cat << 'EOF' > build.sh
          #!/bin/bash
          set -xe
          echo 'LANG=zh_CN.UTF-8' >> /etc/environment
          echo 'LANGUAGE=zh_CN.UTF-8' >> /etc/environment
          echo 'LC_ALL=zh_CN.UTF-8' >> /etc/environment
          echo 'LC_CTYPE=zh_CN.UTF-8' >> /etc/environment
          # curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo
          # curl -o /etc/yum.repos.d/epel.repo https://mirrors.aliyun.com/repo/epel-7.repo

          # 定义镜像列表  "http://mirrors.aliyun.com/centos-vault/7.9.2009"
          MIRRORS=(
              "http://mirror.rackspace.com/centos-vault/7.9.2009"
              "https://mirror.nsc.liu.se/centos-store/7.9.2009"
              "https://linuxsoft.cern.ch/centos-vault/7.9.2009"
              "https://archive.kernel.org/centos-vault/7.9.2009"
              "https://vault.centos.org/7.9.2009"
          )

          # 初始化变量
          FASTEST_MIRROR=""
          FASTEST_TIME=99999

          echo "Testing mirror response times..."

          # 测试每个镜像的响应时间
          for MIRROR in "${MIRRORS[@]}"; do
              echo -n "Testing $MIRROR ... "
              # 使用 curl 测试响应时间
              TIME=$(curl -o /dev/null -s -w "%{time_total}\n" "$MIRROR")
              echo "$TIME seconds"

              # 比较响应时间，记录最快的镜像
              if (( $(echo "$TIME < $FASTEST_TIME" | bc -l) )); then
                  FASTEST_TIME=$TIME
                  FASTEST_MIRROR=$MIRROR
              fi
          done

          # 输出最快的镜像
          echo "-----------------------------------"
          echo "Fastest mirror: $FASTEST_MIRROR"
          echo "Response time: $FASTEST_TIME seconds"

          echo "[base]" > /etc/yum.repos.d/CentOS-Base.repo
          echo "name=CentOS-Base" >> /etc/yum.repos.d/CentOS-Base.repo
          echo "baseurl=${FASTEST_MIRROR}/os/\$basearch/" >> /etc/yum.repos.d/CentOS-Base.repo
          echo "gpgcheck=0" >> /etc/yum.repos.d/CentOS-Base.repo
          echo "[updates]"  >> /etc/yum.repos.d/CentOS-Base.repo
          echo "name=CentOS-updates" >> /etc/yum.repos.d/CentOS-Base.repo
          echo "baseurl=${FASTEST_MIRROR}/updates/\$basearch/" >> /etc/yum.repos.d/CentOS-Base.repo
          echo "gpgcheck=0" >> /etc/yum.repos.d/CentOS-Base.repo
          echo "[extras]"  >> /etc/yum.repos.d/CentOS-Base.repo
          echo "name=CentOS-extras" >> /etc/yum.repos.d/CentOS-Base.repo
          echo "baseurl=${FASTEST_MIRROR}/extras/\$basearch/" >> /etc/yum.repos.d/CentOS-Base.repo
          echo "gpgcheck=0" >> /etc/yum.repos.d/CentOS-Base.repo
          echo "[centosplus]"  >> /etc/yum.repos.d/CentOS-Base.repo
          echo "name=CentOS-centosplus" >> /etc/yum.repos.d/CentOS-Base.repo
          echo "baseurl=${FASTEST_MIRROR}/centosplus/\$basearch/" >> /etc/yum.repos.d/CentOS-Base.repo
          echo "gpgcheck=0" >> /etc/yum.repos.d/CentOS-Base.repo

          yum clean all
          yum makecache
          yum install -y https://dl.fedoraproject.org/pub/archive/epel/7/x86_64/Packages/e/epel-release-7-14.noarch.rpm
          ls -lh /etc/yum.repos.d/

          yum -y install tzdata
          ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
          echo 'Asia/Shanghai' > /etc/timezone
          yum update -y
          yum install -y flex bison ncurses-dev texinfo gcc gperf patch libtool automake g++ libncurses5-dev gawk subversion expat libexpat1-dev binutils-dev bc libcap-dev autoconf libgmp-dev build-essential pkg-config libmpc-dev libmpfr-dev autopoint gettext txt2man liblzma-dev libssl-dev libz-dev mercurial wget tar cmake zstd ninja-build lz4 liblz4-tool liblz4-dev lzma libc6-dev-i386 ncurses-devel expat-devel binutils-devel gmp-devel make pkgconfig mpfr-devel gettext-devel zlib-devel lz4-devel xz xz-devel glibc-devel.i686 which clang lld bzip2 glibc glibc-devel
          yum install -y pcre-devel zlib-devel make git wget sed perl-IPC-Cmd GeoIP GeoIP-devel zip systemd autoconf automake libtool zstd-devel
          yum install -y perl-Test-Simple perl-FindBin perl-IPC-Cmd perl-Text-Template perl-File-Compare perl-File-Copy perl-Data-Dumper
          yum install -y llvm llvm-devel clang clang-devel libstdc++-devel glibc-devel tree python3
          yum install -y perl gawk perl-Pod-Perldoc file elfutils-devel gawk sed grep 
          which pod2man
          which grep awk sed


          echo "[buildlogs-devtoolset-10-centos-x86_64]" > /etc/yum.repos.d/centos7-devtoolset-10.repo
          echo "name=devtoolset-10" >> /etc/yum.repos.d/centos7-devtoolset-10.repo
          echo "baseurl=https://buildlogs.cdn.centos.org/c7-devtoolset-10.x86_64" >> /etc/yum.repos.d/centos7-devtoolset-10.repo
          echo "gpgcheck=0" >> /etc/yum.repos.d/centos7-devtoolset-10.repo
          echo "enabled=1" >> /etc/yum.repos.d/centos7-devtoolset-10.repo
          yum -y update
          yum -y install devtoolset-10 --nogpgcheck
          scl enable devtoolset-10 bash
          source /opt/rh/devtoolset-10/enable
          gcc -v
          g++ -v
          make -v
          
          free -h

          # TODO: Add more dynamic option handling
          while getopts a: flag; do
            case "${flag}" in
              a) arch=${OPTARG} ;;
              *) echo "Invalid argument passed" && exit 1 ;;
            esac
          done

          # TODO: Better target handling
          case "${arch}" in
            "arm") TARGET="arm-eabi" ;;
            "arm64") TARGET="aarch64-elf" ;;
            "arm64gnu") TARGET="aarch64-linux-gnu" ;;
            # "x86") TARGET="x86_64-elf" ;;
            "x86") TARGET="x86_64-linux-gnu" ;;
          esac
          # Declare the number of jobs to run simultaneously
          JOBS=$(nproc --all)
          
          cd /opt
          export WORK_DIR="$PWD"
          export PREFIX="$WORK_DIR/gcc-indiff"
          export PATH="$PREFIX/bin:/usr/bin/core_perl:$PATH"
          # export OPT_FLAGS="-flto -flto-compression-level=10 -O3 -pipe -ffunction-sections -fdata-sections"
          export OPT_FLAGS="-flto-compression-level=10 -O2 -pipe -ffunction-sections -fdata-sections"
          export OPT_FLAGS=""
          # rm -rf "$WORK_DIR"/{binutils,build-binutils,build-gcc,gcc}
          
          # update git
          yum -y remove git
          yum -y install https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo.x86_64.rpm
          yum -y install git
          git --version
          
          echo "Downloading Pre-requisites"
          echo "Cloning binutils"
          #git clone git://sourceware.org/git/binutils-gdb.git -b master binutils --depth=1
          BACKUP_URLS=("git://sourceware.org/git/binutils-gdb.git" "https://github.com/bminor/binutils-gdb.git")
          for URL in "${BACKUP_URLS[@]}"; do
              git clone "$URL" -b master binutils --depth=1 && break
          done
          sed -i '/^development=/s/true/false/' binutils/bfd/development.sh
          echo "Cloned binutils!"
          echo "Cloning GCC"
          # git clone git://gcc.gnu.org/git/gcc.git -b master gcc --depth=1
          BACKUP_URLS=("git://gcc.gnu.org/git/gcc.git" "https://github.com/gcc-mirror/gcc")
          for URL in "${BACKUP_URLS[@]}"; do
              git clone "$URL" -b master gcc --depth=1 && break
          done

          cd "${WORK_DIR}"
          # git clone https://github.com/Microsoft/vcpkg.git --depth 1
          # cd vcpkg
          # export VCPKG_ROOT=$(pwd)
          # export PATH=$VCPKG_ROOT:$PATH
          # ./bootstrap-vcpkg.sh
          # ./vcpkg integrate install
          # ./vcpkg install zlib zstd

          echo "Downloaded prerequisites!"
          curl -s -X POST "https://api.telegram.org/bot${{ env.BOT_TOKEN }}/sendMessage" -d chat_id="${{ env.CHAT_ID }}" -d "disable_web_page_preview=true" -d "parse_mode=html" -d text="<b>Starting centos7 GCC Build</b>"
          
          # --------- build zstd -----------------
          COMPOMENTS_ZSTD_VERSION=1.5.8
          COMPOMENTS_INTERNAL_GLIBC_VERSION=2.41
          PREFIX_DIR="$PREFIX"
          PREFIX_BASE_NAME="$(basename "$PREFIX")"
          BUILD_STAGE1_LIBRARY_PREFIX="$WORK_DIR/stage1-$PREFIX_BASE_NAME-library"
          BUILD_STAGE1_TOOLS_PREFIX="$WORK_DIR/stage1-$PREFIX_BASE_NAME-tools"
          BUILD_STAGE1_GCC_PREFIX="$WORK_DIR/stage1-$PREFIX_BASE_NAME-gcc"

          # yum install -y cmake3
          # sudo ln -sf /usr/bin/cmake3 /usr/bin/cmake

          curl -sLo cmake3.tar.gz https://github.com/Kitware/CMake/releases/download/v3.31.6/cmake-3.31.6-linux-x86_64.tar.gz
          tar -xzf cmake3.tar.gz
          mv cmake-3.31.6-linux-x86_64 /opt/cmake
          rm -f /usr/bin/cmake
          ln -sf /opt/cmake/bin/cmake /usr/bin/cmake
          
          # install gcc
          curl -sLo /opt/gcc-indiff.zip "${{ env.gcc_indiff_centos7_url }}"
          unzip /opt/gcc-indiff.zip -d /opt/mygcc
          export CC=/opt/mygcc/bin/gcc 
          export CXX=/opt/mygcc/bin/g++
          export LD_LIBRARY_PATH=/opt/mygcc/lib:/opt/mygcc/lib64:$LD_LIBRARY_PATH
          export PATH=/opt/mygcc/bin:$PATH

          # check and download
          function check_and_download() {
            PKG_NAME="$1"
            PKG_MATCH_EXPR="$2"
            PKG_URL="$3"

            PKG_VAR_VAL=($(find . -maxdepth 1 -type f -name "$PKG_MATCH_EXPR"))
            if [[ ${#PKG_VAR_VAL[@]} -gt 0 ]]; then
              echo "${PKG_VAR_VAL[0]}"
              return 0
            fi

            if [[ -z "$PKG_URL" ]]; then
              echo -e "\\033[31;1m$PKG_NAME not found.\\033[39;49;0m"
              return 1
            fi

            if [[ -z "$4" ]]; then
              OUTPUT_FILE="$(basename "$PKG_URL")"
            else
              OUTPUT_FILE="$4"
            fi

            DOWNLOAD_SUCCESS=1
            for ((i = 0; i < 5; ++i)); do
              if [[ $DOWNLOAD_SUCCESS -eq 0 ]]; then
                break
              fi
              DOWNLOAD_SUCCESS=0
              if [[ $i -ne 0 ]]; then
                echo "Retry to download from $PKG_URL to $OUTPUT_FILE again."
                sleep $i || true
              fi
              curl -kL "$PKG_URL" -o "$OUTPUT_FILE" || DOWNLOAD_SUCCESS=1
            done

            if [[ $DOWNLOAD_SUCCESS -ne 0 ]]; then
              echo -e "\\033[31;1mDownload $PKG_NAME from $PKG_URL failed.\\033[39;49;0m"
              rm -f "$OUTPUT_FILE" || true
              return $DOWNLOAD_SUCCESS
            fi

            PKG_VAR_VAL=($(find . -maxdepth 1 -name "$PKG_MATCH_EXPR"))

            if [[ ${#PKG_VAR_VAL} -eq 0 ]]; then
              echo -e "\\033[31;1m$PKG_NAME not found.\\033[39;49;0m"
              return 1
            fi

            echo "${PKG_VAR_VAL[0]}"
          }
          
          # install zstd
          function build_zstd() {
            INSTALL_PREFIX_PATH="$1"
            STAGE_CFLAGS=""
            STAGE_LDFLAGS=""
            if [[ "$INSTALL_PREFIX_PATH" == "$BUILD_STAGE1_LIBRARY_PREFIX" ]] || [[ "$INSTALL_PREFIX_PATH" == "$BUILD_STAGE1_TOOLS_PREFIX" ]]; then
              STAGE_CONFIGURE_OPTIONS="-DBUILD_SHARED_LIBS=OFF "
              BUILD_BACKUP_PKG_CONFIG_PATH="$PKG_CONFIG_PATH"
              if [[ "x$BUILD_BACKUP_PKG_CONFIG_PATH" == "x" ]]; then
                export PKG_CONFIG_PATH="$BUILD_STAGE1_LIBRARY_PREFIX/lib64/pkgconfig:$BUILD_STAGE1_LIBRARY_PREFIX/lib/pkgconfig"
              else
                export PKG_CONFIG_PATH="$BUILD_STAGE1_LIBRARY_PREFIX/lib64/pkgconfig:$BUILD_STAGE1_LIBRARY_PREFIX/lib/pkgconfig:$BUILD_BACKUP_PKG_CONFIG_PATH"
              fi
              STAGE_CFLAGS="-I$BUILD_STAGE1_LIBRARY_PREFIX/include "
              STAGE_LDFLAGS="-L$BUILD_STAGE1_LIBRARY_PREFIX/lib64 -L$BUILD_STAGE1_LIBRARY_PREFIX/lib "
            else
              STAGE_CONFIGURE_OPTIONS="-DBUILD_SHARED_LIBS=ON "
              STAGE_CFLAGS="-I$INSTALL_PREFIX_PATH/include "
              STAGE_LDFLAGS="-L$INSTALL_PREFIX_PATH/lib64 -L$INSTALL_PREFIX_PATH/lib "
            fi

            echo "$LDFLAGS" | grep -F '$ORIGIN/../lib64' || STAGE_LDFLAGS="$STAGE_LDFLAGS -Wl,-rpath=\$ORIGIN:\$ORIGIN/../lib64:\$ORIGIN/../lib"

            if [[ -z "$BUILD_TARGET_COMPOMENTS" ]] || [[ "0" == $(is_in_list zstd $BUILD_TARGET_COMPOMENTS) ]]; then
              ZSTD_PKG=$(check_and_download "zstd" "zstd-$COMPOMENTS_ZSTD_VERSION*.tar.gz" "https://github.com/indiff/zstd/archive/refs/tags/v$COMPOMENTS_ZSTD_VERSION.tar.gz" "zstd-$COMPOMENTS_ZSTD_VERSION.tar.gz")
              
              if [[ $? -ne 0 ]]; then
                echo -e "$ZSTD_PKG"
                exit 1
              fi
              if [[ $BUILD_DOWNLOAD_ONLY -eq 0 ]]; then
                tar -axvf $ZSTD_PKG
                ZSTD_DIR=$(ls -d zstd-$COMPOMENTS_ZSTD_VERSION* | grep -v \.tar\.gz)
                cd $ZSTD_DIR
                mkdir -p build_jobs_dir
                cd build_jobs_dir

                if [[ -e CMakeCache.txt ]]; then
                  cmake --build . --target clean
                  rm -f CMakeCache.txt
                fi

                # Using -DCMAKE_INSTALL_LIBDIR=lib to keep the same output directory as configure settings
                env LDFLAGS="${STAGE_LDFLAGS}${LDFLAGS}" CFLAGS="${STAGE_CFLAGS}${CFLAGS}" CXXFLAGS="${STAGE_CFLAGS}${CXXFLAGS}" \
                  cmake ../build/cmake "-DCMAKE_POSITION_INDEPENDENT_CODE=ON" "-DZSTD_BUILD_TESTS=OFF" "-DZSTD_BUILD_CONTRIB=0" "-DCMAKE_INSTALL_PREFIX=$INSTALL_PREFIX_PATH" \
                  -DCMAKE_INSTALL_LIBDIR=lib \
                  "-DCMAKE_FIND_ROOT_PATH=$INSTALL_PREFIX_PATH" "-DCMAKE_PREFIX_PATH=$INSTALL_PREFIX_PATH" $STAGE_CONFIGURE_OPTIONS
                if [[ $? -ne 0 ]]; then
                  echo -e "\\033[31;1mError: configure zstd failed.\\033[39;49;0m"
                  exit 1
                fi

                env LDFLAGS="${STAGE_LDFLAGS}${LDFLAGS}" CFLAGS="${STAGE_CFLAGS}${CFLAGS}" CXXFLAGS="${STAGE_CFLAGS}${CXXFLAGS}" \
                  cmake --build . $BUILD_THREAD_OPT
                if [[ $? -ne 0 ]]; then
                  echo -e "\\033[31;1mError: build zstd failed.\\033[39;49;0m"
                  exit 1
                fi

                env LDFLAGS="${STAGE_LDFLAGS}${LDFLAGS}" CFLAGS="${STAGE_CFLAGS}${CFLAGS}" CXXFLAGS="${STAGE_CFLAGS}${CXXFLAGS}" \
                  cmake --install . --prefix "$INSTALL_PREFIX_PATH"                

                if [[ $? -ne 0 ]]; then
                  echo -e "\\033[31;1mError: install zstd failed.\\033[39;49;0m"
                  exit 1
                fi

                cd "$WORKING_DIR"
              fi
            fi
          }
          
          # bootstrap
          mkdir -p "$PREFIX_DIR/include"
          mkdir -p "$PREFIX_DIR/lib"
          mkdir -p "$PREFIX_DIR/lib64"

          build_zstd "$PREFIX_DIR"

          ls -lh "$PREFIX_DIR/lib"

          # 控制是否使用内部 glibc 1=使用新编译的glibc 0=使用系统自带
          USE_INTERNAL_GLIBC=0

          if [[ "$USE_INTERNAL_GLIBC" == "1" ]]; then
            cd "${WORK_DIR}"
            curl -sLO https://ftp.gnu.org/gnu/libc/glibc-2.41.tar.gz
            tar -xf glibc-2.41.tar.gz
            cd glibc-2.41
            mkdir build && cd build
            GLIBC_LDFLAGS=" -Wl,-rpath=\$ORIGIN:\$ORIGIN/../../lib64:\$ORIGIN/../../lib"
            ../configure --prefix=$PREFIX_DIR/internal-runtime --enable-static --enable-shared
            make -j$(nproc)
            make install
            export GLIBC_RT="$PREFIX_DIR/internal-runtime"
            export C_INCLUDE_PATH="$GLIBC_RT/include"
            export LIBRARY_PATH="$GLIBC_RT/lib:$GLIBC_RT/lib64"
            export LD_LIBRARY_PATH="$GLIBC_RT/lib:$GLIBC_RT/lib64:$LD_LIBRARY_PATH"
            SYSROOT_ARG="--with-sysroot=$GLIBC_RT"
            HEADER_ARG="--with-native-system-header-dir=$GLIBC_RT/include"
          else
            unset C_INCLUDE_PATH
            unset LIBRARY_PATH
            unset LD_LIBRARY_PATH
            SYSROOT_ARG="--with-sysroot=/"
            HEADER_ARG=""
          fi

          cd "${WORK_DIR}"
          echo "Building Binutils"
          mkdir build-binutils
          cd build-binutils
          # --target="$TARGET"
          TARGET="x86_64-redhat-linux-gnu"
          # 
          env CC=/opt/mygcc/bin/gcc CXX=/opt/mygcc/bin/g++ CFLAGS="$OPT_FLAGS" CXXFLAGS="$OPT_FLAGS" \
              ../binutils/configure --target="$TARGET" --build="$TARGET" --host="$TARGET" \
              --program-prefix= \
              --disable-dependency-tracking \
              --disable-docs \
              --disable-gdb \
              --disable-nls \
              --disable-werror \
              --without-debuginfod \
              --enable-ld \
              --enable-gold \
              --enable-deterministic-archives=no \
              --enable-lto \
              --enable-libada \
              --enable-compressed-debug-sections=none \
              --enable-generate-build-notes=no \
              --enable-threads=yes \
              --enable-relro=yes \
              --enable-plugins \
              --enable-build-with-cxx \
              --enable-host-pie \
              --prefix="$PREFIX" \
              --with-bugurl=https://github.com/indiff/gcc-build \
              $SYSROOT_ARG \
              --with-pkgversion="Indiff binutils"
              
          make -j"$JOBS"
          make install -j"$JOBS"
          cd ../
          echo "Built Binutils, proceeding to next step...."

          cd "${WORK_DIR}"
          echo "Building GCC"
          cd gcc
          # https://www.mirrorservice.org/sites/sourceware.org/pub/gcc/infrastructure
          # https://ftp.mpi-inf.mpg.de/mirrors/gnu/mirror/gcc.gnu.org/pub/gcc/infrastructure/
          ./contrib/download_prerequisites || \
            (sed -i "s|http://gcc.gnu.org/pub/gcc/infrastructure/|https://www.mirrorservice.org/sites/sourceware.org/pub/gcc/infrastructure/|" contrib/download_prerequisites && \
            ./contrib/download_prerequisites)
          echo "Indiff Build" > gcc/DEV-PHASE
          cd ../
          mkdir build-gcc
          cd build-gcc
          rm -rf ../gcc/testsuite
          # tree "${VCPKG_ROOT}/packages/zstd_x64-linux/"
          yum install -y libzstd-devel libzstd
          # env LDFLAGS="-Wl,-rpath=$PREFIX/lib64:$PREFIX/lib" CFLAGS="$OPT_FLAGS -fPIC -I$PREFIX/include " CXXFLAGS="$OPT_FLAGS -fPIC -I$PREFIX/include " \
          export OPT_FLAGS=" -lrt -lpthread -ldl -lm -lzstd  "
          # python require this --disable-gcov 
          env CC=/opt/mygcc/bin/gcc CXX=/opt/mygcc/bin/g++ LDFLAGS="-L/opt/mygcc/lib64 -Wl,-rpath=$PREFIX/lib64:$PREFIX/lib" \
            CFLAGS="$OPT_FLAGS -fPIC $([[ "$USE_INTERNAL_GLIBC" == "1" ]] && echo "-I$GLIBC_RT/include")" \
            CXXFLAGS="$OPT_FLAGS -fPIC $([[ "$USE_INTERNAL_GLIBC" == "1" ]] && echo "-I$GLIBC_RT/include")" \
            ../gcc/configure --target="$TARGET" --build="$TARGET" --host="$TARGET" \
            --with-bugurl=https://github.com/indiff/gcc-build \
            --disable-decimal-float \
            --disable-docs \
            --disable-libffi \
            --disable-libgomp \
            --disable-libmudflap \
            --disable-libquadmath \
            --disable-multilib \
            --disable-libunwind-exceptions \
            --disable-libjava-multilib  \
            --enable-__cxa_atexit \
            --enable-shared \
            --enable-static \
            --enable-bootstrap \
            --enable-gnu-unique-object \
            --enable-plugin  \
            --enable-gnu-indirect-function \
            --enable-initfini-array \
            --enable-default-ssp \
            --enable-languages=c,c++,lto \
            --enable-threads=posix \
            --enable-libstdcxx-backtrace \
            --enable-libatomic \
            --enable-offload-targets=nvptx-none \
            --enable-build-with-cxx  \
            --enable-checking=release  \
            --enable-gold  \
            --enable-ld  \
            --enable-libada  \
            --enable-lto  \
            --enable-objc-gc  \
            --enable-gprofng  \
            --enable-vtable-verify  \
            --enable-linker-build-id  \
            --enable-rpath  \
            --disable-multilib  \
            --without-cuda-driver --enable-offload-defaulted \
            --with-tune=generic \
            --with-arch_32=x86-64 \
            --prefix="$PREFIX" \
            --with-tune=generic \
            --with-gcc-major-version-only \
            --with-gnu-as \
            --with-gnu-ld \
            --with-zstd \
            --with-linker-hash-style=gnu \
            $SYSROOT_ARG \
            $HEADER_ARG \
            --with-ld=/opt/mygcc/bin/ld \
            --with-pkgversion="Indiff GCC" || cat config.log

          #  dump Makefile
          cat Makefile || true
          
          make all-gcc -j"$JOBS"
          make all-target-libgcc -j"$JOBS"
          # 重要顺序问题解决 libstdc++-v3 编译问题
          make all-target-libatomic -j"$JOBS"
          make all-target-libstdc++-v3 -j"$JOBS" 
          make install-target-libgcc -j"$JOBS"
          make install-target-libatomic -j"$JOBS"
          make install-target-libstdc++-v3 -j"$JOBS"
          make install-gcc -j"$JOBS"
          
          # sed -i 's/Link tests are not allowed after GCC_NO_EXECUTABLES/Link tests are not allowed after GCC_NO_EXECUTABLES  $LINENO/g' ../gcc/libstdc++-v3/configure
          # grep -n 'Link tests are not allowed after GCC_NO_EXECUTABLES' ../gcc/libstdc++-v3/configure
          
          
          
          # make all -j"$JOBS"
          # make install -j"$JOBS"
          echo "Built GCC end!"
          
          cd /opt/gcc-indiff
          zname=/workspace/gcc-indiff-centos7-${{ needs.before_build.outputs.GCC_BUILD_VERSION }}-x86_64-$(date +'%Y%m%d_%H%M')
          zip -r -q -9 $zname.zip .
          mv $zname.zip $zname.xz
          
          # free memory
          free -h
          sync
          echo 3 > /proc/sys/vm/drop_caches
          free -h && df -h
          # follow can not work,exit success
          exit 0
          EOF
          chmod +x build.sh

      - name: Build GCC in Docker
        run: |
          sudo timedatectl set-timezone Asia/Shanghai
          timedatectl status
          sudo mkdir -p ${{ needs.before_build.outputs.GCC_BUILD_PREFIX }}
          sudo chown -R 777 ${{ needs.before_build.outputs.GCC_BUILD_PREFIX }}
          docker run --cpus="$(nproc --all)" --privileged -u root --rm -v ${{ github.workspace }}:/workspace -v ${{ needs.before_build.outputs.GCC_BUILD_PREFIX }}:${{ needs.before_build.outputs.GCC_BUILD_PREFIX }} -w /workspace centos:7 /bin/bash -c "/workspace/build.sh -a x86"
          export build_timestamp="$(date +'%Y%m%d_%H%M')"
          export glib_version="$(cat glibc_version.txt)"
          export size_kb=$(du -k *.zip | head -n 1 | cut -f1)
          tree ${{ needs.before_build.outputs.GCC_BUILD_PREFIX }}

      - name: Upload GCC package
        uses: actions/upload-artifact@v5
        with:
          name: gcc-centos7-${{ needs.before_build.outputs.GCC_BUILD_VERSION }}
          path: |
            ${{ github.workspace }}/*.xz
  
  build-in-centos6:
    # skip
    if: false
    runs-on: ubuntu-latest
    needs: before_build

    steps:
      - name: Checkout v4
        uses: actions/checkout@v5

      - name: Create build script
        run: |
          set -xe
          cat << 'EOF' > build.sh
          #!/bin/bash
          set -xe
          echo 'LANG=zh_CN.UTF-8' >> /etc/environment
          echo 'LANGUAGE=zh_CN.UTF-8' >> /etc/environment
          echo 'LC_ALL=zh_CN.UTF-8' >> /etc/environment
          echo 'LC_CTYPE=zh_CN.UTF-8' >> /etc/environment
          
          # 定义镜像列表  "http://mirrors.aliyun.com/centos-vault/7.9.2009"
          MIRRORS=(
              "http://mirror.rackspace.com/centos-vault/6.10/"
              "https://mirror.nsc.liu.se/centos-store/6.10/"
              "https://linuxsoft.cern.ch/centos-vault/6.10/"
              "https://archive.kernel.org/centos-vault/6.10/"
              "https://vault.centos.org/6.10/"
          )
          
          curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-vault-6.10.repo
          yum clean all
          yum makecache
          yum install -y https://dl.fedoraproject.org/pub/archive/epel/6/x86_64/Packages/e/epel-release-6-8.noarch.rpm
          ls -lh /etc/yum.repos.d/

          yum install -y tzdata sudo
          ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
          echo 'Asia/Shanghai' > /etc/timezone

          yum update -y
          yum install -y flex bison ncurses-dev texinfo gcc gperf patch libtool automake g++ libncurses5-dev gawk subversion expat libexpat1-dev binutils-dev bc libcap-dev autoconf libgmp-dev build-essential pkg-config libmpc-dev libmpfr-dev autopoint gettext txt2man liblzma-dev libssl-dev libz-dev mercurial wget tar cmake zstd ninja-build lz4 liblz4-tool liblz4-dev lzma libc6-dev-i386 ncurses-devel expat-devel binutils-devel gmp-devel make pkgconfig mpfr-devel gettext-devel zlib-devel lz4-devel xz xz-devel glibc-devel.i686 which clang lld bzip2 glibc glibc-devel --skip-broken
          yum install -y pcre-devel zlib-devel make git wget sed perl-IPC-Cmd GeoIP GeoIP-devel zip systemd autoconf automake libtool
          yum install -y perl-Test-Simple perl-FindBin perl-IPC-Cmd perl-Text-Template perl-File-Compare perl-File-Copy perl-Data-Dumper
          yum install -y llvm llvm-devel clang clang-devel libstdc++-devel python3 tree

          echo "[centos-sclo-rh]" > /etc/yum.repos.d/centos6-devtoolset.repo
          echo "name=CentOS-6 - SCLo rh" >> /etc/yum.repos.d/centos6-devtoolset.repo
          echo "baseurl=https://vault.centos.org/6.10/sclo/x86_64/rh" >> /etc/yum.repos.d/centos6-devtoolset.repo
          echo "gpgcheck=0" >> /etc/yum.repos.d/centos6-devtoolset.repo
          echo "enabled=1" >> /etc/yum.repos.d/centos6-devtoolset.repo
          yum -y install devtoolset-9
          scl enable devtoolset-9 bash
          source /opt/rh/devtoolset-9/enable
          gcc -v
          make -v
          # 确保系统已安装所需的依赖工具和库
          yum install -y gettext-devel openssl-devel perl-CPAN perl-devel zlib-devel
          # 安装最新版本的 Git

          export WORK_DIR="$PWD"
          # Declare the number of jobs to run simultaneously
          JOBS=$(nproc --all)

          curl -sLO https://mirrors.edge.kernel.org/pub/software/scm/git/git-${{ env.GIT_VERSION }}.tar.gz
          tar -zxf git-${{ env.GIT_VERSION }}.tar.gz
          cd git-${{ env.GIT_VERSION }}
          cp -rf po po_bak
          rm -f po/*.po
          cp po_bak/zh*.po po/
          rm -rf po_bak
          make configure
          ./configure --prefix=/opt/git
          # htmldir=/tmp/git-docs mandir=/tmp/git-docs infodir=/tmp/git-docs \
          # TEST_BUILTINS_OBJS="" \
          # TEST_OBJS="" \
          # TEST_PROGRAMS="" \
          # TEST_PROGRAMS_NEED_X="" \
          # TEST_BUILTINS_OBJS="" \
          # UNIT_TEST_PROGRAMS="" \
          # UNIT_TEST_DIR="" \
          # UNIT_TEST_BIN="" \
          # UNIT_TEST_PROGS="" \
          # UNIT_TEST_OBJS="" \
          # CLAR_TEST_SUITES="" \
          # CLAR_TEST_PROG="" \
          make -j"$JOBS" NO_EXPAT=1 NO_TCLTK=1 NO_GETTEXT=1 NO_PERL=1 CFLAGS="-O2 -pipe -w" \
              NO_REGEX=NeedsStartEnd \
              NO_INSTALL_HARDLINKS=Yes \
              INSTALL_SYMLINKS=Yes all
          make install -j"$JOBS"
          cd /opt/git
          du -sh .
          du -sh *
          tree /opt/git
          tree /opt/git > /workspace/git-indiff-centos6-tree.xz
          echo $(pwd)
          gname="/workspace/git-indiff-centos6-${{ env.GIT_VERSION }}-$(date +'%Y%m%d_%H%M')"
          cd /opt/git
          zip -r -q -9 "${gname}.zip" .
          mv "${gname}.zip" "${gname}.xz"
          ls -lh $gname.xz
          # rm -f /usr/bin/git
          # ln -sf /opt/git/bin/git /usr/bin/git
          cp -f /opt/git/bin/git /usr/bin/git
          rm -rf /usr/local/libexec
          
          # ln -sf /opt/git/libexec /usr/local/libexec
          git --version

          # git clone --depth 1 https://github.com/indiff/qttabbar.git
          cd $WORK_DIR

          # can not build binutils in centos 6
          # ../../binutils/gold/output.cc:32:10: fatal error: uchar.h: No such file or directory
          # 32 | #include <uchar.h>
          exit 0
          
          # TODO: Add more dynamic option handling
          while getopts a: flag; do
            case "${flag}" in
              a) arch=${OPTARG} ;;
              *) echo "Invalid argument passed" && exit 1 ;;
            esac
          done

          # TODO: Better target handling
          case "${arch}" in
            "arm") TARGET="arm-eabi" ;;
            "arm64") TARGET="aarch64-elf" ;;
            "arm64gnu") TARGET="aarch64-linux-gnu" ;;
            "x86") TARGET="x86_64-elf" ;;
          esac

          
          export PREFIX="$WORK_DIR/gcc-${arch}"
          export PATH="$PREFIX/bin:/usr/bin/core_perl:$PATH"
          # export OPT_FLAGS="-flto -flto-compression-level=10 -O3 -pipe -ffunction-sections -fdata-sections"
          # export OPT_FLAGS="-flto -flto-compression-level=9 -O3 -pipe -ffunction-sections -fdata-sections"
          export OPT_FLAGS="-O2 -pipe -ffunction-sections -fdata-sections"
          rm -rf "$WORK_DIR"/{binutils,build-binutils,build-gcc,gcc}

          echo "Downloading Pre-requisites"
          echo "Cloning binutils"
          #git clone git://sourceware.org/git/binutils-gdb.git -b master binutils --depth=1
          BACKUP_URLS=("git://sourceware.org/git/binutils-gdb.git" "git://github.com/bminor/binutils-gdb.git")
          for URL in "${BACKUP_URLS[@]}"; do
              git clone "$URL" -b master binutils --depth=1 && break
          done
          sed -i '/^development=/s/true/false/' binutils/bfd/development.sh
          echo "Cloned binutils!"
          echo "Cloning GCC"

          export gcc_ver="${{ github.event.inputs.gcc_ver }}"
          if [[ -z "$gcc_ver" ]]; then gcc_ver="nightly"; fi

          if [ ${gcc_ver} == "nightly" ]; then
            git clone git://gcc.gnu.org/git/gcc.git -b master gcc --depth=1
          else
            curl -sLO https://ftp.gnu.org/gnu/gcc/gcc-${gcc_ver}/gcc-${gcc_ver}.tar.xz
            tar -C . --transform "s/gcc-${gcc_ver}/gcc/" -xJf ./gcc-${gcc_ver}.tar.xz
          fi


          cd "${WORK_DIR}"
          echo "Downloaded prerequisites!"
          
          curl -s -X POST "https://api.telegram.org/bot${{ env.BOT_TOKEN }}/sendMessage" -d chat_id="${{ env.CHAT_ID }}" -d "disable_web_page_preview=true" -d "parse_mode=html" -d text="<b>Starting centos6 GCC Build, gcc ver ${gcc_ver}</b>"
          cd "${WORK_DIR}"
          echo "Building Binutils"
          mkdir build-binutils
          cd build-binutils
          # --target="$TARGET"
          TARGET="x86_64-redhat-linux-gnu"
          env CFLAGS="$OPT_FLAGS" CXXFLAGS="$OPT_FLAGS" \
              ../binutils/configure --target="$TARGET" --build="$TARGET" --host="$TARGET" \
              --program-prefix= \
              --disable-dependency-tracking \
              --disable-docs \
              --disable-gdb \
              --disable-nls \
              --disable-werror \
              --enable-ld \
              --enable-gold \
              --enable-deterministic-archives=no \
              --enable-lto \
              --enable-compressed-debug-sections=none \
              --enable-generate-build-notes=no \
              --enable-threads=yes \
              --enable-relro=yes \
              --enable-plugins \
              --prefix="$PREFIX" \
              --with-bugurl=https://github.com/indiff/gcc-build \
              --with-pkgversion="Indiff binutils"
          # --with-sysroot
          make -j"$JOBS"

          make install -j"$JOBS"
          cd ../
          echo "Built Binutils, proceeding to next step...."

          cd "${WORK_DIR}"
          echo "Building GCC"
          cd gcc
          ./contrib/download_prerequisites || \
            (sed -i "s|http://gcc.gnu.org/pub/gcc/infrastructure/|https://www.mirrorservice.org/sites/sourceware.org/pub/gcc/infrastructure/|" contrib/download_prerequisites && \
            ./contrib/download_prerequisites)
          echo "Indiff Build" > gcc/DEV-PHASE
          cd ../
          mkdir build-gcc
          cd build-gcc
          #  --target="$TARGET"
          env CFLAGS="$OPT_FLAGS" CXXFLAGS="$OPT_FLAGS" \
            ../gcc/configure \
            --with-bugurl=https://github.com/indiff/gcc-build \
            --disable-decimal-float \
            --disable-docs \
            --disable-gcov \
            --disable-libffi \
            --disable-libgomp \
            --disable-libmudflap \
            --disable-libquadmath \
            --disable-libstdcxx-pch \
            --disable-nls \
            --disable-shared \
            --enable-bootstrap \
            --enable-multilib \
            --enable-gnu-unique-object \
            --enable-plugin  \
            --enable-gnu-indirect-functio \
            --enable-initfini-array \
            --enable-default-ssp \
            --enable-languages=c,c++,fortran,lto \
            --enable-threads=posix \
            --prefix="$PREFIX" \
            --with-gnu-as \
            --with-gnu-ld \
            --with-headers="/usr/include" \
            --with-linker-hash-style=gnu \
            --with-newlib \
            --with-pkgversion="Indiff GCC" \
            --with-sysroot

          make all-gcc -j"$JOBS"
          make all-target-libgcc -j"$JOBS"
          make install-gcc -j"$JOBS"
          make install-target-libgcc -j"$JOBS"
          echo "Built GCC end!"
          cd /workspace/gcc-x86
          zname=/workspace/centos6-indiff-gcc-x86-$(date +'%Y%m%d_%H%M')
          zip -r -q -9 $zname.zip .
          mv $zname.zip $zname.xz
          
          # free memory
          free -h
          sync
          echo 3 > /proc/sys/vm/drop_caches
          free -h && df -h
          # follow can not work,exit success
          exit 0       
 
          
          
          while getopts a: flag; do
            if [[ $flag == "a" ]]; then
              arch="$OPTARG"
              case "${OPTARG}" in
                "arm") ARCH_CLANG="ARM" && TARGET_CLANG="arm-linux-gnueabi" && TARGET_GCC="arm-eabi" ;;
                "arm64") ARCH_CLANG="AArch64" && TARGET_CLANG="aarch64-linux-gnu" && TARGET_GCC="aarch64-elf" ;;
                "x86") ARCH_CLANG="X86" && TARGET_CLANG="x86_64-linux-gnu" && TARGET_GCC="x86_64-elf" ;;
                *) echo "Invalid architecture passed: $OPTARG" && exit 1 ;;
              esac
            else
              echo "Invalid argument passed" && exit 1
            fi
          done

          # Let's keep this as is
          export WORK_DIR="$(pwd)"
          export PREFIX="${WORK_DIR}/gcc-${arch}"
          export PATH="$PREFIX/bin:$PATH"

          echo "Cleaning up previously cloned repos..."
          rm -rf "${WORK_DIR}"/llvm-project

          echo "Building Integrated lld for ${arch} with ${TARGET_CLANG} as target"
          echo ">"
          echo "> Downloading LLVM for LLD"
          echo ">"
          cd "${WORK_DIR}"
          git clone https://github.com/llvm/llvm-project.git -b main "${WORK_DIR}/llvm-project" --depth=1


          curl -s -X POST "https://api.telegram.org/bot${{ env.BOT_TOKEN }}/sendMessage" -d chat_id="${{ env.CHAT_ID }}" -d "disable_web_page_preview=true" -d "parse_mode=html" -d text="<b>Starting centos6 LLD Build</b>"
          cd "${WORK_DIR}"
          echo ">"
          echo "> Building LLD"
          echo ">"
          curl -sLo cmake3.tar.gz https://github.com/Kitware/CMake/releases/download/v3.31.6/cmake-3.31.6-linux-x86_64.tar.gz
          tar -xzvf cmake3.tar.gz
          mv cmake-3.31.6-linux-x86_64 /opt/cmake
          rm -f /usr/bin/cmake
          ln -sf /opt/cmake/bin/cmake /usr/bin/cmake
          mkdir -p "${WORK_DIR}/llvm-project/build"
          cd "${WORK_DIR}/llvm-project/build"
          export INSTALL_LLD_DIR="${WORK_DIR}/gcc-${arch}"
          cmake -G "Ninja" \
            -DLLVM_ENABLE_PROJECTS=lld \
            -DCMAKE_INSTALL_PREFIX="$INSTALL_LLD_DIR" \
            -DLLVM_DEFAULT_TARGET_TRIPLE="$TARGET_CLANG" \
            -DLLVM_TARGET_ARCH="X86" \
            -DLLVM_TARGETS_TO_BUILD=$ARCH_CLANG \
            -DCMAKE_CXX_COMPILER="$(which clang++)" \
            -DCMAKE_C_COMPILER="$(which clang)" \
            -DLLVM_OPTIMIZED_TABLEGEN=True \
            -DLLVM_USE_LINKER=lld \
            -DLLVM_ENABLE_LTO=Full \
            -DCMAKE_BUILD_TYPE=Release \
            -DLLVM_BUILD_RUNTIME=Off \
            -DLLVM_INCLUDE_TESTS=Off \
            -DLLVM_INCLUDE_EXAMPLES=Off \
            -DLLVM_INCLUDE_BENCHMARKS=Off \
            -DLLVM_ENABLE_MODULES=Off \
            -DLLVM_ENABLE_BACKTRACES=Off \
            -DLLVM_PARALLEL_COMPILE_JOBS="$(nproc --all)" \
            -DLLVM_PARALLEL_LINK_JOBS="$(nproc --all)" \
            -DBUILD_SHARED_LIBS=Off \
            -DLLVM_INSTALL_TOOLCHAIN_ONLY=On \
            -DCMAKE_C_FLAGS="-O3" \
            -DCMAKE_CXX_FLAGS="-O3" \
            -DLLVM_ENABLE_PIC=False \
          ${WORK_DIR}/llvm-project/llvm

          ninja -j$(nproc --all)
          ninja -j$(nproc --all) install
          # Create proper symlinks
          cd "${INSTALL_LLD_DIR}"/bin
          ln -s lld ${TARGET_GCC}-ld.lld
          cd "${WORK_DIR}"

          cd "${WORK_DIR}"
          CUR_DIR=$(pwd)
          X86S=$(which strip)
          #A64S=$(which aarch64-linux-gnu-strip)
          #A32S=$(which arm-linux-gnu-strip)

          find "$CUR_DIR" -type f -exec file {} \; >.file-idx

          grep "x86" .file-idx |
            grep "not strip" | grep -v "relocatable" |
            tr ':' ' ' | awk '{print $1}' |
            while read -r file; do $X86S "$file"; done

          # grep "ARM" .file-idx | grep "aarch64" |
          #   grep "not strip" | grep -v "relocatable" |
          #   tr ':' ' ' | awk '{print $1}' |
          #   while read -r file; do $A64S "$file"; done

          # grep "ARM" .file-idx | grep "32.bit" |
          #   grep "not strip" | grep -v "relocatable" |
          #   tr ':' ' ' | awk '{print $1}' |
          #   while read -r file; do $A32S "$file"; done
          rm ".file-idx"
          cd gcc-x86
          zip -r -q -9 /workspace/centos6-eva-gcc-x86-$(/bin/date -u '+%d%m%Y').zip .
          # get glibc Version
          echo $(cut -d- -f2 <<<$(rpm -q glibc)) >> /workspace/glibc_version.txt
          EOF
          chmod +x build.sh
         

      - name: Build GCC in Docker
        run: |
          sudo timedatectl set-timezone Asia/Shanghai
          timedatectl status
          sudo mkdir -p ${{ needs.before_build.outputs.GCC_BUILD_PREFIX }}
          sudo chown -R 777 ${{ needs.before_build.outputs.GCC_BUILD_PREFIX }}
          docker run --cpus="$(nproc --all)" -u root --rm -v ${{ github.workspace }}:/workspace -v ${{ needs.before_build.outputs.GCC_BUILD_PREFIX }}:${{ needs.before_build.outputs.GCC_BUILD_PREFIX }} -w /workspace centos:centos6.10 /bin/bash -c "/workspace/build.sh -a x86"
          export build_timestamp="$(date +'%Y%m%d_%H%M')"
          export glib_version="$(cat glibc_version.txt)"
          export size_kb=$(du -k *.zip | head -n 1 | cut -f1)
          tree ${{ needs.before_build.outputs.GCC_BUILD_PREFIX }}

      - name: Upload GCC package
        uses: actions/upload-artifact@v5
        with:
          name: gcc-centos6-${{ needs.before_build.outputs.GCC_BUILD_VERSION }}
          path: |
            ${{ github.workspace }}/*.xz
       

  build-lld-centos7:
    runs-on: ubuntu-latest
    needs: before_build
    #timeout-minutes: 120
    permissions:
      contents: read
      packages: write

    steps:
      - name: Free Disk-Space
        run: df -h && sudo apt-get clean && docker system prune -a -f && sudo rm -rf /usr/local/lib/android /usr/share/dotnet /opt/ghc && df -h && free -h

      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/gcc-build-centos7
          tags: |
            type=raw,value=latest
            type=sha,prefix=

      - name: Generate Docker cache key
        id: cache-key
        run: |
          CACHE_KEY=$(cat Dockerfile centos7.sh | sha256sum | cut -d' ' -f1)
          echo "cache_key=${CACHE_KEY}" >> $GITHUB_OUTPUT
          echo "Docker cache key: ${CACHE_KEY}"

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/gcc-build-centos7:latest
          cache-to: type=inline

      - name: Build LLD in Docker
        run: |
          sudo timedatectl set-timezone Asia/Shanghai
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            ghcr.io/${{ github.repository_owner }}/gcc-build-centos7:latest \
            /bin/bash -c "source /opt/rh/llvm-toolset-13.0/enable && chmod +x ./build-lld.sh && ./build-lld.sh -a x86"

      - name: Package LLD
        run: |
          cd gcc-x86
          zip -r -q -9 ../lld-indiff-centos7-x86_64-$(date +'%Y%m%d_%H%M').zip .
          cd ..
          mv lld-indiff-centos7-x86_64-*.zip lld-indiff-centos7-x86_64-$(date +'%Y%m%d_%H%M').xz

      - name: Upload LLD package
        uses: actions/upload-artifact@v5
        with:
          name: lld-centos7-x86_64
          path: |
            ${{ github.workspace }}/*.xz

  publish-release:
      #  build-in-centos6 can not buildss
      needs: [before_build,build-in-centos7,build-lld-centos7] # build-arm64-tc,build-x86-tc,build-in-centos6  ,build-lld-centos7
      runs-on: ubuntu-latest

      steps:
        - uses: actions/checkout@v5
        - name: Restoring artifacts
          uses: actions/download-artifact@main
          with:
            path: ${{ github.workspace }}
            pattern: gcc-*
            merge-multiple: false
        
        - name: Restoring LLD artifacts
          uses: actions/download-artifact@main
          with:
            path: ${{ github.workspace }}
            pattern: lld-*
            merge-multiple: false
          
        - name: Release Tag
          id: release_tag
          run: |
            # sudo add-apt-repository ppa:ubuntu-toolchain-r/test
            # sudo apt update
            # sudo add-apt-repository ppa:ubuntu-toolchain-r/ppa
            # sudo apt upgrade
            sudo apt install -y chrony
            sudo systemctl enable chrony
            sudo systemctl start chrony
            sudo timedatectl set-timezone Asia/Shanghai
            timedatectl status
            
            echo "TAG_NAME=$(date +'%Y%m%d_%H%M')_${{ needs.before_build.outputs.GCC_BUILD_VERSION }}" >> $GITHUB_ENV

        - name: Create Release
          run: |
            set -xe
            # 使用 GitHub API 获取最后一次提交信息
            commit_info=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/gcc-mirror/gcc/commits \
            | jq -r '.[0] | "\(.commit.author.name) \(.commit.message) \(.commit.author.date)"')
            # 输出变量
            echo "Commit Info: $commit_info"
            echo -e "## 你好$(date) gcc ${{ needs.before_build.outputs.GCC_BUILD_VERSION }}\n > $commit_info\n" > hello.md

            # 查找打包文件：优先 *.xz, 没有则找 *.zip
            gcc_pkgpath="$(find . -maxdepth 2 -type f -name '*centos7*.xz' | grep -v lld | head -n 1)"
            if [[ -z "$gcc_pkgpath" ]]; then
              echo '未找到GCC打包文件*.xz' >&2

              gcc_pkgpath="$(find . -maxdepth 2 -type f -name '*centos7*.zip' | grep -v lld | head -n 1)"
              if [[ -z "$gcc_pkgpath" ]]; then
                echo '未找到GCC打包文件*.zip' >&2
                exit 1
              fi
            fi
            gcc_bname="$(basename "$gcc_pkgpath")"

            # 查找LLD打包文件
            lld_pkgpath="$(find . -maxdepth 2 -type f -name 'lld-*centos7*.xz' | head -n 1)"
            if [[ -z "$lld_pkgpath" ]]; then
              lld_pkgpath="$(find . -maxdepth 2 -type f -name 'lld-*centos7*.zip' | head -n 1)"
            fi
            
            if [[ -n "$lld_pkgpath" ]]; then
              lld_bname="$(basename "$lld_pkgpath")"
            fi

            cat <<'EOF' >> hello.md
            
            ### GCC Package
            Proxy download:
            ```bash         
            curl -#Lo gcc-indiff.zip "https://ghproxy.cfd/https://github.com/indiff/gcc-build/releases/download/${{ env.TAG_NAME }}/GCC_PACKAGE"
            ```
            
            Direct download:
            ```bash         
            curl -#Lo gcc-indiff.zip "https://github.com/indiff/gcc-build/releases/download/${{ env.TAG_NAME }}/GCC_PACKAGE"
            ```
            EOF
            
            if [[ -n "$lld_bname" ]]; then
              cat <<'EOF' >> hello.md
            
            ### LLD Package
            Proxy download:
            ```bash         
            curl -#Lo lld-indiff.zip "https://ghproxy.cfd/https://github.com/indiff/gcc-build/releases/download/${{ env.TAG_NAME }}/LLD_PACKAGE"
            ```
            
            Direct download:
            ```bash         
            curl -#Lo lld-indiff.zip "https://github.com/indiff/gcc-build/releases/download/${{ env.TAG_NAME }}/LLD_PACKAGE"
            ```
            EOF
              sed -i "s/LLD_PACKAGE/${lld_bname}/g" hello.md
            fi
            
            sed -i "s/GCC_PACKAGE/${gcc_bname}/g" hello.md
            
            # Create release with both packages
            if [[ -n "$lld_pkgpath" ]]; then
              gh release create ${{ env.TAG_NAME }} -F hello.md "$gcc_pkgpath" "$lld_pkgpath"
            else
              gh release create ${{ env.TAG_NAME }} -F hello.md "$gcc_pkgpath"
            fi
          env:
            GITHUB_TOKEN: ${{ github.token }}

  send-day:
    needs: [publish-release]
    runs-on: ubuntu-latest

    steps:
      - name: Send telegram messages
        run: |
          doy=$(date +%j)
          year=$(date +%Y)
          total=$(date -d "$year-12-31" +%j)
          pct=$(awk -v d=$doy -v t=$total 'BEGIN{printf "%.4f", d/t*100}')

          curl -s -X POST "https://api.telegram.org/bot${{ env.BOT_TOKEN }}/sendMessage" -d chat_id="${{ env.CHAT_ID }}" -d "disable_web_page_preview=true" -d "parse_mode=html" -d text="It's $(date +%A) my dudes!"
          curl -s -X POST "https://api.telegram.org/bot${{ env.BOT_TOKEN }}/sendMessage" -d chat_id="${{ env.CHAT_ID }}" -d "disable_web_page_preview=true" -d "parse_mode=html" -d text="The year is ${pct}% complete. Time is flying."
